import { BrowserWindow, app, ipcMain } from 'electron'
import { info } from 'electron-log'

import type { OnPacket, SendPacket } from './preload'
import { connections, createProxyServer } from './services/proxy'
import { createSLServer } from './services/serverlist'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit()
}

const createWindow = (): void => {
    const mainWindow = new BrowserWindow({
        width: 1366,
        height: 900,
        autoHideMenuBar: true,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })

    ipcMain.addListener('connections_changed', (connections: { id: string; isStable: boolean }[]) => {
        mainWindow.webContents.send('connections_changed', connections)
    })

    ipcMain.addListener('packet_received', (data: OnPacket) => {
        mainWindow.webContents.send('packet_received', data)
    })

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit()
    }
})

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow()
    }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

createSLServer().listen({ port: 5467 }, () => {
    info('Server list server listening on port 5467...')
})

createProxyServer({
    remoteHost: '51.81.0.90',
    remotePort: 8281,
    onPacketReceived: (connectionId, direction, data) => {
        ipcMain.emit('packet_received', { connectionId, direction, data: data.toString('hex') })
    },
    onConnectionsChanged: (connectionIds) => {
        ipcMain.emit('connections_changed', connectionIds)
    },
}).listen({ port: 8281 }, () => {
    info('Proxy server listening on port 5466...')
})

ipcMain.handle('get_connections', () => {
    return connections.list()
})

ipcMain.handle('send_packet', (_, { direction, connectionId, data }: SendPacket) => {
    if (!connectionId || !data) return false
    return connections.sendPacket({ direction, connectionId, data })
})
